1)Делегирование вместо наследования
У наследования: 
1)статическое отношение 
2)классификация

У делегирования: 
1)динамическое отношение
2)роль

=====ТРИ ЧАСТИ ШАБЛОНОВ=====
1)Порождающие: 
--------------------------------------------------------------------------
	-Factory method - фабричный метод
		+Определяет интерфейс для создания объекта
		+Делегирует создание экземпляров подклассам 
		+Инкапсулирует код создания конекретных продуктов
		|https://www.baeldung.com/java-factory-pattern <-------Статья|
	--------------------------------------------------------------------------
	-Abstract method - абстрактная фабрика
		+расширение фабричного метода, создает семейство продуктов
		|https://www.baeldung.com/java-abstract-factory-pattern <-------Статья|
		Хороший пример из лекции, для пепси и колы, где метод getOrangeDrink для фабрик вернет разные значения(для пепси - миринда, для коки - фанта)	
		+Позволяет получить семейство связанных продуктов, которые совместимы и работают с друг другом
	--------------------------------------------------------------------------
	-Builder - строитель
		+Позволяет строить сложные объекты у которых есть много разных вариантов 
		+пишем класс, который будет через сеттеры накапливать необходимые поля и потом передаем методу creat и у нас создается объект другого класса
		пример:
			Builder b = new Buider()
				.setWhere(param) 
				.setTransport(param)
				.setDate(param)
			Probuct p = b.create()
	--------------------------------------------------------------------------
	-Prototype - прототип
		+Создание объектов клонированием
		|https://www.baeldung.com/java-pattern-prototype <-------Статья|
	-Singleton - одиночка 
		+я промолчу бля....
	-Object pool - пул объектов
	--------------------------------------------------------------------------

2)Структурные(задают структуру объектов):
--------------------------------------------------------------------------
	-Adapter - Адаптер
		+Делегирование с заменой интерфейса
		|https://www.baeldung.com/java-adapter-pattern <-------Статья|
	--------------------------------------------------------------------------
	-Bridge - Мост
		+Разделяет иерархии абстракций и реализаций
			Абстракции - фигуры(треугольники, прямоугольники)
			Реализации - стили углов(закругленный, обычные...)
		+Поведение делегируется реализации
		|https://www.baeldung.com/java-bridge-pattern <-------Статья|
	--------------------------------------------------------------------------
	-Composite - Компоновщик
		
	--------------------------------------------------------------------------
	-Decorator - Декоратор
		+Делегирование с расширением функциональности
		|https://www.baeldung.com/java-decorator-pattern <-------Статья|
	--------------------------------------------------------------------------
	-Facade - Фасад
	
	--------------------------------------------------------------------------
	-Flyweight - Приспособленец/Легковес
		+Представление большого множества объектов одним
		+Для экономии памяти
		|https://www.baeldung.com/java-flyweight <-------Статья|
	--------------------------------------------------------------------------
	-Proxy - заместитель 
		+Делегирование с тем же интерфейсом
		|https://www.baeldung.com/java-proxy-pattern <-------Статья|
	--------------------------------------------------------------------------
	
3)Поведенченские шаблоны
	-Chain of Responsibility - Цепочка обязанностей
		+Передача запроса по цепочке обработчиков
		|https://www.baeldung.com/chain-of-responsibility-pattern <-------Статья|
		|https://habr.com/ru/articles/727454/ <-------Статья|
	--------------------------------------------------------------------------
	-Command - команда
		+пятая лаба по проге...
		|https://www.baeldung.com/java-command-pattern<-------Статья|
		|https://javarush.com/groups/posts/1684-pattern-command-svoimi-slovami <-------Статья|
	--------------------------------------------------------------------------
	-Interpreter - интерпретатор
		+я промолчу, я лично хейтер этого шаблона, он мне не понравился...
		|https://www.baeldung.com/java-interpreter-pattern <-------Статья|
	--------------------------------------------------------------------------
	-Iterator - итератор(да да, шаблон...)
		+сделать объект итерируемый
		+можно просто реализовать интрефейс Iterable<T> 
		+либо танцы с бубном, когда требуется другое 
		|статейку хорошую потерял, поэтому сори :3|
	--------------------------------------------------------------------------
	-Mediator - Посредник
		+класс посредник для управления изменением состояния других объектов
		|https://www.baeldung.com/java-mediator-pattern <-------Статья|
	--------------------------------------------------------------------------
	-Memento (не mori) - Хранитель
		+для реализации undo
		+Хранение и восстановление состояния объекта
		|https://www.baeldung.com/java-memento-design-pattern <-------Статья|
	--------------------------------------------------------------------------
	-Observer - наблюдатель
		+классический случай для обработки событий гуи
		+Пользователь нажимает кнопку, а дальше уже это передается и там распределяется
		+Оповещение объекта об изменении состояния
		+обработка событий 
			Источник - наблюдаемый 
			Обработчик - наблюдатель
	--------------------------------------------------------------------------
	-State - состояние
		+Изменяет состояние объекта в зависимости от состояния - реализация кофейного автомата
		|https://www.baeldung.com/java-state-design-pattern <-------Статья|
	--------------------------------------------------------------------------
	-Strategy - стратегия
		+Выбор одного из алгоритмов, реализованных в классе
		|https://www.baeldung.com/java-strategy-pattern <-------Статья|
	--------------------------------------------------------------------------
	-Template method - шаблонный метод
		+позволяет реализовать часть поведения в базовом классе, остальное реализуется в подклассах
		+пример из покемонов: Move.applyOppDamage()
		|https://www.geeksforgeeks.org/template-method-design-pattern/ <-------Статья|
	--------------------------------------------------------------------------
	-Visitor - посетитель
	 	+Позволяет сгруппировать операции, выполняемые над структурой объектов
	 	+Применяется если структура элементов более стабильна, чем набор операций
	 	|https://www.baeldung.com/java-visitor-pattern <-------Статья|
	--------------------------------------------------------------------------

Вот как то так, вот все паттерны ооп, которые были названы в лекциях, можно использовать как удобный справочник
